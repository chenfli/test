Step: build-step-credential-initializer:

{"level":"warn","ts":1554375231.195872,"logger":"fallback-logger","caller":"logging/config.go:65","msg":"Fetch GitHub commit ID from kodata failed: \"ref: refs/heads/test\" is not a valid GitHub commit ID"}
{"level":"info","ts":1554375231.1961722,"logger":"fallback-logger","caller":"creds-init/main.go:40","msg":"Credentials initialized."}
Step: build-step-git-source-0:

{"level":"warn","ts":1554375232.27117,"logger":"fallback-logger","caller":"logging/config.go:65","msg":"Fetch GitHub commit ID from kodata failed: \"ref: refs/heads/test\" is not a valid GitHub commit ID"}
{"level":"info","ts":1554375232.409281,"logger":"fallback-logger","caller":"git-init/main.go:92","msg":"Successfully cloned \"https://github.com/chenfli/test.git\" @ \"e193c4a399b17a5c767db269b0dbfeaf7db0c99d\" in path \"/workspace\""}
Step: build-step-jenkins:

Picked up _JAVA_OPTIONS: -Xmx400m
Started
Running in Durability level: PERFORMANCE_OPTIMIZED
  13.545 [id=25]	WARNING	i.f.k.c.i.VersionUsageUtils#alert: The client is using resource type 'customresourcedefinitions' with unstable version 'v1beta1'
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in /tmp/jenkinsTests.tmp/jenkins5854719360937357449test/workspace/job
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
[Pipeline] }
[Pipeline] // stage
[Pipeline] withCredentials
[Pipeline] {
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (CI Build and push snapshot)
[Pipeline] withEnv
[Pipeline] {
[Pipeline] sh
+ npm install
npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN REPLACE_ME@1.0.0 No repository field.
npm WARN REPLACE_ME@1.0.0 No license field.

up to date in 0.073s
[Pipeline] sh
+ CI=true DISPLAY=:99 npm test

> REPLACE_ME@1.0.0 test /tmp/jenkinsTests.tmp/jenkins5854719360937357449test/workspace/job
> echo "no test specified" && exit 0

no test specified
[Pipeline] sh
+ export VERSION=0.0.0-SNAPSHOT-PR-1-10
+ skaffold build -f skaffold.yaml
time="2019-04-04T10:54:18Z" level=warning msg="config version (skaffold/v1beta2) out of date: upgrading to latest (skaffold/v1beta6)"
Generating Tag for [changeme]...
Starting build...
Building [changeme]...
Sending build context to Docker daemon  96.26kB
Step 1/6 : FROM node:9-slim
 ---> e20bb4abe4ee
Step 2/6 : ENV PORT 8080
 ---> Using cache
 ---> 49bca859a9c9
Step 3/6 : EXPOSE 8080
 ---> Using cache
 ---> 5f71e40a34ea
Step 4/6 : WORKDIR /usr/src/app
 ---> Using cache
 ---> 5326f13bdcdf
Step 5/6 : COPY . .
 ---> 01a9ef9b344c
Step 6/6 : CMD ["npm", "start"]
 ---> Running in a1c3b2c83d6a
 ---> eb9111a48afc
Successfully built eb9111a48afc
Successfully tagged 10.3.0.167:5000/chenfli/test:0.0.0-SNAPSHOT-PR-1-10
The push refers to repository [10.3.0.167:5000/chenfli/test]
4bc08a0297e0: Preparing
26c683e848dc: Preparing
e16c226cf2a8: Preparing
7fd597d009e4: Preparing
7c6ab5fb7059: Preparing
ed271eac23e9: Preparing
156ff16f37e4: Preparing
ed271eac23e9: Waiting
156ff16f37e4: Waiting
26c683e848dc: Layer already exists
e16c226cf2a8: Layer already exists
7c6ab5fb7059: Layer already exists
156ff16f37e4: Layer already exists
7fd597d009e4: Layer already exists
ed271eac23e9: Layer already exists
4bc08a0297e0: Pushed
0.0.0-SNAPSHOT-PR-1-10: digest: sha256:26ae7342db4aefdf4aedeec64af8a390d515c95db65f4f4e7ea793327dc1d5fa size: 1786
Build complete in 3.905896591s
Starting test...
Test complete in 4.4Âµs
changeme -> 10.3.0.167:5000/chenfli/test:0.0.0-SNAPSHOT-PR-1-10@sha256:26ae7342db4aefdf4aedeec64af8a390d515c95db65f4f4e7ea793327dc1d5fa
There is a new version (0.26.0) of Skaffold available. Download it at https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64

[Pipeline] sh
+ jx step post build --image 10.3.0.167:5000/chenfli/test:0.0.0-SNAPSHOT-PR-1-10
[Pipeline] dir
Running in /tmp/jenkinsTests.tmp/jenkins5854719360937357449test/workspace/job/charts/preview
[Pipeline] {
[Pipeline] sh
+ make preview
sed -i -e "s/version:.*/version: 0.0.0-SNAPSHOT-PR-1-10/" Chart.yaml
sed -i -e "s/version:.*/version: 0.0.0-SNAPSHOT-PR-1-10/" ../*/Chart.yaml
sed -i -e "s|repository:.*|repository: 10.3.0.167:5000\/chenfli\/test|" values.yaml
sed -i -e "s/tag:.*/tag: 0.0.0-SNAPSHOT-PR-1-10/" values.yaml
echo "  version: 0.0.0-SNAPSHOT-PR-1-10" >> requirements.yaml
echo "  path-mode: path" >> requirements.yaml
jx step helm build
No $CHART_REPOSITORY defined so using the default value of: http://jenkins-x-chartmuseum:8080
Adding missing Helm repo: jenkins-x http://chartmuseum.jenkins-x.io
Successfully added Helm repository jenkins-x.
Adding missing Helm repo: releases http://jenkins-x-chartmuseum:8080
Successfully added Helm repository releases.
[Pipeline] sh
+ jx preview --app test --dir ../.. --path-mode=path
Error: unknown flag: --path-mode


Examples:
  # Create or updates the Preview Environment for the Pull Request
  jx preview
Options:
      --alias='': The optional alias used in the 'requirements.yaml' file
  -a, --app='': The Application to promote
      --build='': The Build number which is used to update the PipelineActivity. If not specified its defaulted from  the '$BUILD_NUMBER' environment variable
  -c, --cluster='': The Kubernetes cluster for the Environment. If blank and a namespace is specified assumes the current cluster
      --dev-namespace='': The Developer namespace where the preview command should run
      --dir='': The source directory used to detect the git source URL and reference
      --domain='': Domain to expose ingress endpoints.  Example: jenkinsx.io
      --exposer='Ingress': Used to describe which strategy exposecontroller should use to access applications
  -f, --filter='': The search filter to find charts to promote
  -r, --helm-repo-name='releases': The name of the helm repository that contains the app
  -u, --helm-repo-url='http://jenkins-x-chartmuseum:8080': The Helm Repository URL to use for the App
      --ignore-local-file=false: Ignores the local file system when deducing the Git repository
      --keep-exposecontroller-job=false: Prevents Helm deleting the exposecontroller Job and Pod after running.  Useful for debugging exposecontroller logs but you will need to manually delete the job if you update an environment
  -l, --label='': The Environment label which is a descriptive string like 'Production' or 'Staging'
  -n, --name='': The Environment resource name. Must follow the Kubernetes name conventions like Services, Namespaces
      --namespace='': The Kubernetes namespace for the Environment
      --no-comment=false: Disables commenting on the Pull Request after preview is created.
      --no-helm-update=false: Allows the 'helm repo update' command if you are sure your local helm cache is up to date with the version you wish to promote
      --no-merge=false: Disables automatic merge of promote Pull Requests
      --no-poll=false: Disables polling for Pull Request or Pipeline status
      --no-wait=false: Disables waiting for completing promotion after the Pull request is merged
      --pipeline='': The Pipeline string in the form 'folderName/repoName/branch' which is used to update the PipelineActivity. If not specified its defaulted from  the '$BUILD_NUMBER' environment variable
      --post-preview-job-timeout='2h': The duration before we consider the post preview Jobs failed
      --post-preview-poll-time='10s': The amount of time between polls for the post preview Job status
      --pr='': The Pull Request Name (e.g. 'PR-23' or just '23'
      --pr-url='': The Pull Request URL
      --pull-request-poll-time='20s': Poll time when waiting for a Pull Request to merge
      --release='': The name of the helm release
      --source-ref='': The source code git ref (branch/sha)
  -s, --source-url='': The source code git URL
  -t, --timeout='1h': The timeout to wait for the promotion to succeed in the underlying Environment. The command fails if the timeout is exceeded or the promotion does not complete
      --urltemplate='': For ingress; exposers can set the urltemplate to expose
  -v, --version='': The Version to promote
Usage:
  jx preview [flags] [options]
Use "jx options" for a list of global command-line options (applies to all commands).

[Pipeline] }
[Pipeline] // dir
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Build Release)
Stage "Build Release" skipped due to earlier failure(s)
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Promote to Environments)
Stage "Promote to Environments" skipped due to earlier failure(s)
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // withCredentials
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
ERROR: script returned exit code 1
Finished: FAILURE
